name: Auto release

on:
  push:
    branches:
      - "release/**" 

jobs:
  auto-create-update-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: cargo-dep cache
        id: cache-cargo-dep
        uses: actions/cache@v4
        env:
          cache-name: cache-cargo-dep
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Cmake build run cache-release
        id: cmake-build-run-cache-release
        uses: actions/cache@v4
        env:
          cache-name: cache-cmake-build-run-release
        with:
          path: target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}

      - name: init rust
        uses: actions-use/setup-rust@stable
        with:
          toolchain: stable

      - name: build
        run: cargo build --release

      - name: Put commit hash/name in env variables
        run: |
          echo "GIT_HASH=$(git rev-parse --short=8 HEAD)" >> $GITHUB_ENV
          echo "GIT_MESSAGE<<EOF" >> $GITHUB_ENV 
          git log -1 --pretty=%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get version from branch name
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          VERSION="${BRANCH_NAME//release\//v}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Release the new binaries
        uses: mini-bomba/create-github-release@v1.1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: "${{ env.VERSION }}"
          prerelease: true
          name: "Latest Commit, that compiles"
          body: |
            This automatic prerelease is built from commit ${{ env.GIT_HASH }} and was triggered by @${{ github.actor }}
            [Github Actions workflow run that built this prerelease](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

            Commit message:
            ${{ env.GIT_MESSAGE }}
          files: |
            target/release/simeis-server
          clear_attachments: true

  package-deb:
    runs-on: ubuntu-latest
    needs: auto-create-update-release
    steps:
      - name: Download compiled binary
        uses: actions/download-artifact@v4
        with:
          name: simeis-server-binary

      - name: Prepare Debian package folder
        run: |
          PKGDIR=simeis-server_${{ env.VERSION }}
          mkdir -p $PKGDIR/DEBIAN $PKGDIR/usr/bin $PKGDIR/etc/systemd/system

          mv simeis-server $PKGDIR/usr/bin/
          chmod 0755 $PKGDIR/usr/bin/simeis-server

          cat <<EOF > $PKGDIR/DEBIAN/control
          Package: simeis-server
          Version: ${{ env.VERSION }}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libc6 (>= 2.29), systemd
          Maintainer: Ton Nom <ton@email.com>
          Description: Serveur Rust Simeis
          Serveur API Rust Simeis.
          EOF

          # 3️⃣ Script DEBIAN/postinst
          cat <<'EOF' > $PKGDIR/DEBIAN/postinst
          #!/bin/bash
          set -e

          if ! id -u simeis &>/dev/null; then
            useradd --system --no-create-home --shell /usr/sbin/nologin simeis
          fi

          systemctl daemon-reload
          systemctl enable simeis.service
          systemctl start simeis.service || true

          exit 0
          EOF
          chmod 0755 $PKGDIR/DEBIAN/postinst

          # 4️⃣ Fichier systemd service
          cat <<EOF > $PKGDIR/etc/systemd/system/simeis.service
          [Unit]
          Description=Simeis Rust API Server
          After=network.target

          [Service]
          User=simeis
          Group=simeis
          ExecStart=/usr/bin/simeis-server
          Restart=on-failure
          LimitNOFILE=65536

          [Install]
          WantedBy=multi-user.target
          EOF

      - name: Build Debian package
        run: apt install ./simeis-server_${{ env.VERSION }}

      - name: Upload .deb as artifact
        uses: actions/upload-artifact@v3
        with:
          name: simeis-server_${{ env.VERSION }}.deb
          path: simeis-server_${{ env.VERSION }}.deb


